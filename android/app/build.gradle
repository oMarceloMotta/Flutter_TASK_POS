def keyProperties = new Properties()
def keyStorePropertiesFile = rootProject.file('key.properties');
if (keyStorePropertiesFile.exists()) {
    keyProperties.load(new FileInputStream(keyStorePropertiesFile))
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localProperties.load(new InputStreamReader(new FileInputStream(localPropertiesFile), 'UTF-8'))
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
// START: FlutterFire Configuration
apply plugin: 'com.google.gms.google-services'
// END: FlutterFire Configuration
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion flutter.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Especifique seu próprio ID de aplicativo único (https://developer.android.com/studio/build/application-id.html).
        applicationId "br.com.marcelo.myTasks.my_tasks"
        minSdkVersion 19
        multiDexEnabled true
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }
    signingConfigs{
        release{
            keyAlias keyProperties['keyAlias']
            keyPassword keyProperties['keyPassword']
            storePassword keyProperties['storePassword']
            storeFile keyProperties['storeFile'] ? file(keyProperties['storeFile']) : null
        }
    }
    buildTypes {
        release {
            // TODO: Adicione sua própria configuração de assinatura para a versão de lançamento.
            // Assinando com as chaves de depuração por enquanto, para que `flutter run --release` funcione.
            signingConfig signingConfigs.release
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
